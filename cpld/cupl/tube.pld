Name     tube            ;
PartNo   00              ;
Date     08/12/2023      ;
Revision 01              ;
Designer David Banks     ;
Company  NA              ;
Assembly None            ;
Location                 ;
Device   f1508isptqfp100 ;

// Using defaults allow fitter command line overrides to work properly
//
//property atmel {cascade_logic  on       };
//property atmel {fast_inlatch   on       };
//property atmel {foldback_logic on       };
//property atmel {logic_doubling on       };
//property atmel {optimize       on       };
//property atmel {output_fast    off      };
//property atmel {pin_keep       off      };
//property atmel {preassign      keep     };
//property atmel {security       off      };
//property atmel {xor_synthesis  off      };

property atmel {preassign        keep            };
property atmel {global_oe        h_data0,p_data0,p_rst_b,p_irq_b,p_nmi_b };
property atmel {xor_synthesis    off             };
property atmel {jtag             on              };
property atmel {tdi_pullup       on              };
property atmel {tms_pullup       on              };
property atmel {output_fast      off             };
property atmel {verilog_sim      sdl             };
property atmel {open_collector   h_irq_b         };

$define IMPL_HIRQ

$define HP124_EXCLUSIVE

$define PH124_EXCLUSIVE

$define HP3_TWOBYTE

$define PH3_TWOBYTE

$define FIX_PINOUT

$ifdef FIX_PINOUT

pin  77 = h_addr2;
pin  76 = h_addr1;
pin  75 = h_addr0;
pin  79 = h_cs_b;
pin  72 = h_data7;
pin  70 = h_data6;
pin  64 = h_data5;
pin  60 = h_data4;
pin  56 = h_data3;
pin  44 = h_data2;
pin  42 = h_data1;
pin  35 = h_data0;
pin  87 = p_rd_b;
pin  78 = h_rdnw;
pin  89 = h_rst_b;
$ifdef IMPL_HIRQ
pin  48 = h_irq_b;
$endif
pin  47 = drq;
pin  99 = dack_b;
pin 100 = p_addr2;
pin   1 = p_addr1;
pin  96 = p_addr0;
pin  97 = p_cs_b;
pin   2 = p_data7;
pin   6 = p_data6;
pin  12 = p_data5;
pin  16 = p_data4;
pin  19 = p_data3;
pin  22 = p_data2;
pin  25 = p_data1;
pin  27 = p_data0;
pin  85 = h_phi2;
pin  90 = p_wr_b;
pin  46 = p_rst_b;
pin  49 = p_nmi_b;
pin  29 = p_irq_b;

$ELSE

pin    = h_addr2;
pin    = h_addr1;
pin    = h_addr0;
pin    = h_cs_b;
pin    = h_data7;
pin    = h_data6;
pin    = h_data5;
pin    = h_data4;
pin    = h_data3;
pin    = h_data2;
pin    = h_data1;
pin    = h_data0;
pin    = h_phi2;
pin    = h_rdnw;
pin    = h_rst_b;
$ifdef IMPL_HIRQ
pin    = h_irq_b;
$endif
pin    = drq;
pin    = dack_b;
pin    = p_addr2;
pin    = p_addr1;
pin    = p_addr0;
pin    = p_cs_b;
pin    = p_data7;
pin    = p_data6;
pin    = p_data5;
pin    = p_data4;
pin    = p_data3;
pin    = p_data2;
pin    = p_data1;
pin    = p_data0;
pin    = p_rd_b;
pin    = p_wr_b;
pin    = p_rst_b;
pin    = p_nmi_b;
pin    = p_irq_b;

$ENDIF

// Force creation of intermediate nodes

//pinnode = hwrite_r1;
//pinnode = hwrite_r2;
//pinnode = hwrite_r3;
//pinnode = hwrite_r4;

//pinnode = paccess_r1;
//pinnode = paccess_r2;
//pinnode = paccess_r3;
//pinnode = paccess_r4;

// Intermediate values

p_powered_on = p_rd_b # p_wr_b;

hwrite_c   = !h_rdnw & !h_cs_b & !h_addr2 & !h_addr1 & !h_addr0;
hwrite_r1  = !h_rdnw & !h_cs_b & !h_addr2 & !h_addr1 &  h_addr0;
hwrite_r2  = !h_rdnw & !h_cs_b & !h_addr2 &  h_addr1 &  h_addr0;
hwrite_r3  = !h_rdnw & !h_cs_b &  h_addr2 & !h_addr1 &  h_addr0;
hwrite_r4  = !h_rdnw & !h_cs_b &  h_addr2 &  h_addr1 &  h_addr0;

hread_s1   =  h_rdnw & !h_cs_b & !h_addr2 & !h_addr1 & !h_addr0;
hread_r1   =  h_rdnw & !h_cs_b & !h_addr2 & !h_addr1 &  h_addr0;
hread_s2   =  h_rdnw & !h_cs_b & !h_addr2 &  h_addr1 & !h_addr0;
hread_r2   =  h_rdnw & !h_cs_b & !h_addr2 &  h_addr1 &  h_addr0;
hread_s3   =  h_rdnw & !h_cs_b &  h_addr2 & !h_addr1 & !h_addr0;
hread_r3   =  h_rdnw & !h_cs_b &  h_addr2 & !h_addr1 &  h_addr0;
hread_s4   =  h_rdnw & !h_cs_b &  h_addr2 &  h_addr1 & !h_addr0;
hread_r4   =  h_rdnw & !h_cs_b &  h_addr2 &  h_addr1 &  h_addr0;

paccess_r1 = !p_cs_b & !p_addr2 & !p_addr1 &  p_addr0;
paccess_r2 = !p_cs_b & !p_addr2 &  p_addr1 &  p_addr0;
paccess_r3 = !p_cs_b &  p_addr2 & !p_addr1 &  p_addr0;
paccess_r4 = !p_cs_b &  p_addr2 &  p_addr1 &  p_addr0;

// Control Register
pinnode = [control6..0];
[control6..0].ck = !h_phi2;
[control6..1].ar = !h_rst_b;
[control0].ap    = !h_rst_b;
[control6..0].ce = [h_data6..0] & hwrite_c;
[control6..0].d  = h_data7;

t_flag = control6; // Tube reset: a '1' holds the PH/HP FIFOs in their reset state
p_flag = control5; // Parasite reset a '1->0' transision p_rst_b to be asserted for 80us
v_flag = control4; // Two byte mode: a '1' causes PH3/HP3 to operate in two-byte mode
m_flag = control3; // PNMI from HP3 non-empty / PH3 empty
j_flag = control2; // PIEQ from HP4 non-empty
i_flag = control1; // PIRQ from HP1 non-empty
q_flag = control0; // HIRQ from PH4 non-empty


pinnode = reset;
reset = !h_rst_b # t_flag;

// HP1/2/4 FIFOs

pinnode = hp1_state;
pinnode = hp2_state;
pinnode = hp4_state;

hp1_state.ck = !h_phi2;
hp1_state.t  = !hp1_state & hwrite_r1;
hp1_state.ar = reset # (!p_rd_b & paccess_r1);
hp2_state.ck = !h_phi2;
hp2_state.t  = !hp2_state & hwrite_r2;
hp2_state.ar = reset # (!p_rd_b & paccess_r2);
hp4_state.ck = !h_phi2;
hp4_state.t  = !hp4_state & hwrite_r4;
hp4_state.ar = reset # (!p_rd_b & paccess_r4);

hp1_dav = hp1_state;
hp2_dav = hp2_state;
hp4_dav = hp4_state;

$ifdef HP124_EXCLUSIVE

hp1_sav = !hp1_state;
hp2_sav = !hp2_state;
hp4_sav = !hp4_state;

pinnode = [hp1_reg7..0];
pinnode = [hp2_reg7..0];
pinnode = [hp4_reg7..0];

[hp1_reg7..0].ck = !h_phi2;
[hp2_reg7..0].ck = !h_phi2;
[hp4_reg7..0].ck = !h_phi2;

[hp1_reg7..0].ce = hwrite_r1;
[hp2_reg7..0].ce = hwrite_r2;
[hp4_reg7..0].ce = hwrite_r4;

[hp1_reg7..0].d  = [h_data7..0];
[hp2_reg7..0].d  = [h_data7..0];
[hp4_reg7..0].d  = [h_data7..0];

[hp1_data7..0] = [hp1_reg7..0];
[hp2_data7..0] = [hp2_reg7..0];
[hp4_data7..0] = [hp4_reg7..0];

$else

hp1_sav = !hp1_state & !hp2_state & !hp4_state;
hp2_sav = !hp1_state & !hp2_state & !hp4_state;
hp4_sav = !hp1_state & !hp2_state & !hp4_state;

pinnode = [hp124_reg7..0];
//pinnode = hwrite_r124;
hwrite_r124  = hwrite_r1 # hwrite_r2 # hwrite_r4;
[hp124_reg7..0].ck = !h_phi2;
[hp124_reg7..0].ce = hwrite_r124;
[hp124_reg7..0].d  = [h_data7..0];

[hp1_data7..0] = [hp124_reg7..0];
[hp2_data7..0] = [hp124_reg7..0];
[hp4_data7..0] = [hp124_reg7..0];

$endif

// PH1/2/4 FIFOS

pinnode = ph1_state;
pinnode = ph2_state;
pinnode = ph4_state;

ph1_state.ck = p_wr_b;
ph1_state.t  = !ph1_state & paccess_r1;
ph1_state.ar = reset # (h_phi2 & hread_r1);
ph2_state.ck = p_wr_b;
ph2_state.t  = !ph2_state & paccess_r2;
ph2_state.ar = reset # (h_phi2 & hread_r2);
ph4_state.ck = p_wr_b;
ph4_state.t  = !ph4_state & paccess_r4;
ph4_state.ar = reset # (h_phi2 & hread_r4);

ph1_dav = ph1_state;
ph2_dav = ph2_state;
ph4_dav = ph4_state;

$ifdef PH124_EXCLUSIVE

ph1_sav = !ph1_state;
ph2_sav = !ph2_state;
ph4_sav = !ph4_state;

pinnode = [ph1_reg7..0];
pinnode = [ph2_reg7..0];
pinnode = [ph4_reg7..0];

[ph1_reg7..0].ck = p_wr_b;
[ph2_reg7..0].ck = p_wr_b;
[ph4_reg7..0].ck = p_wr_b;

[ph1_reg7..0].ce = paccess_r1;
[ph2_reg7..0].ce = paccess_r2;
[ph4_reg7..0].ce = paccess_r4;

[ph1_reg7..0].d  = [p_data7..0];
[ph2_reg7..0].d  = [p_data7..0];
[ph4_reg7..0].d  = [p_data7..0];

[ph1_data7..0] = [ph1_reg7..0];
[ph2_data7..0] = [ph2_reg7..0];
[ph4_data7..0] = [ph4_reg7..0];

$else

ph1_sav = !ph1_state & !ph2_state & !ph4_state;
ph2_sav = !ph1_state & !ph2_state & !ph4_state;
ph4_sav = !ph1_state & !ph2_state & !ph4_state;

pinnode = [ph124_reg7..0];
//pinnode = paccess_r124;
paccess_r124 = paccess_r1 # paccess_r2 # paccess_r4;
[ph124_reg7..0].ck = p_wr_b;
[ph124_reg7..0].ce = paccess_r124;
[ph124_reg7..0].d  = [p_data7..0];

[ph1_data7..0] = [ph124_reg7..0];
[ph2_data7..0] = [ph124_reg7..0];
[ph4_data7..0] = [ph124_reg7..0];

$endif

// HP3 FIFO

$ifdef HP3_TWOBYTE

pinnode = hp3_wptr;
pinnode = hp3_rptr;
pinnode = hp3_full;
pinnode = hp3_empty;

hp3_wptr.ck = !h_phi2;
hp3_wptr.ar = reset;
hp3_wptr.ce = hwrite_r3 & !hp3_full;
hp3_wptr.t  = 'b'1;

hp3_rptr.ck = p_rd_b;
hp3_rptr.ar = reset;
hp3_rptr.ce = paccess_r3 & !hp3_empty;
hp3_rptr.t  = 'b'1;

hp3_full.ck = !h_phi2;
hp3_full.ar = reset # (!p_rd_b & paccess_r3);
hp3_full.ce = hwrite_r3 & !hp3_full;
hp3_full.d  = hp3_rptr $ hp3_wptr;

hp3_empty.ck = p_rd_b;
hp3_empty.ar = (h_phi2 & hwrite_r3);
hp3_empty.ap = reset;
hp3_empty.ce = paccess_r3 & !hp3_empty;
hp3_empty.d  = hp3_rptr $ hp3_wptr;

pinnode = [hp3_rega7..0];
[hp3_rega7..0].ck = !h_phi2;
[hp3_rega7..0].ce = hwrite_r3 & !hp3_wptr;
[hp3_rega7..0].d  = [h_data7..0];

pinnode = [hp3_regb7..0];
[hp3_regb7..0].ck = !h_phi2;
[hp3_regb7..0].ce = hwrite_r3 & hp3_wptr;
[hp3_regb7..0].d  = [h_data7..0];

// TODO: Empty value
[hp3_data7..0] = [hp3_rega7..0] & !hp3_rptr #
                 [hp3_regb7..0] &  hp3_rptr;

hp3_dav = !v_flag & !hp3_empty # v_flag & hp3_full;
hp3_sav = hp3_empty;

$else

pinnode = [hp3_reg7..0];
[hp3_reg7..0].ck = !h_phi2;
[hp3_reg7..0].ce = hwrite_r3;
[hp3_reg7..0].d  = [h_data7..0];

pinnode = hp3_state;
hp3_state.ck = !h_phi2;
hp3_state.t  = !hp3_state & hwrite_r3;
hp3_state.ar = reset # (!p_rd_b & paccess_r3);

hp3_dav = hp3_state;
hp3_sav = !hp3_state;
[hp3_data7..0] = [hp3_reg7..0];

$endif

// PH3 FIFO

$ifdef PH3_TWOBYTE

pinnode = ph3_wptr;
pinnode = ph3_rptr;
pinnode = ph3_full;
pinnode = ph3_empty;

ph3_wptr.ck = p_wr_b;
ph3_wptr.ap = reset;
ph3_wptr.ce = paccess_r3 & !ph3_full;
ph3_wptr.t  = 'b'1;

ph3_rptr.ck = !h_phi2;
ph3_rptr.ar = reset;
ph3_rptr.ce = hread_r3 & !ph3_empty;
ph3_rptr.t  = 'b'1;

ph3_full.ck = p_wr_b;
ph3_full.ar = reset # (h_phi2 & hread_r3);
ph3_full.ce = paccess_r3 & !ph3_full;
ph3_full.d  = ph3_rptr $ ph3_wptr;

ph3_empty.ck = !h_phi2;
ph3_empty.ar = reset # (!p_wr_b & paccess_r3);
ph3_empty.ce = hread_r3 & !ph3_empty;
ph3_empty.d  = ph3_rptr $ ph3_wptr;

pinnode = [ph3_rega7..0];
[ph3_rega7..0].ck = p_wr_b;
[ph3_rega7..0].ce = paccess_r3 & !ph3_wptr;
[ph3_rega7..0].d  = [p_data7..0];

pinnode = [ph3_regb7..0];
[ph3_regb7..0].ck = p_wr_b;
[ph3_regb7..0].ce = paccess_r3 & ph3_wptr;
[ph3_regb7..0].d  = [p_data7..0];

// TODO: Empty value
[ph3_data7..0] = [ph3_rega7..0] & !ph3_rptr #
                 [ph3_regb7..0] &  ph3_rptr;

ph3_dav = !v_flag & !ph3_empty # v_flag & ph3_full;
ph3_sav = ph3_empty;

$else

pinnode = [ph3_reg7..0];
[ph3_reg7..0].ck = p_wr_b;
[ph3_reg7..0].ce = paccess_r3;
[ph3_reg7..0].d  = [p_data7..0];

pinnode = ph3_state;
ph3_state.ck = p_wr_b;
ph3_state.t  = !ph3_state & paccess_r3;
ph3_state.ar = reset # (h_phi2 & hread_r3);

ph3_sav = !ph3_state;
ph3_dav = ph3_state;
[ph3_data7..0] = [ph3_reg7..0];

$endif

// Interrupt locgic

// Making this a node reduces fanin
// 35+40+38+40+34+34+35+23 = 279 (before)
// 36+36+36+36+34+32+34+29 = 273 (after)
pinnode = nmi_flag;

nmi_flag = hp3_dav # ph3_sav;

p_nmi_b = !(m_flag & nmi_flag);
p_nmi_b.oe = p_powered_on;

p_irq_b = !((j_flag & hp4_dav) # (i_flag & hp1_dav));
p_irq_b.oe = p_powered_on;

$ifdef IMPL_HIRQ
h_irq_b = !(q_flag & ph4_dav & p_powered_on);
$endif

// Reset logic

p_rst_b = !(!h_rst_b # p_flag);
p_rst_b.oe = p_powered_on;

// p_data output multiplexor

unused5..0 = 'b'111111;

[p_data7..0] = [hp1_dav, ph1_sav, control5..0]  & (!p_addr2 & !p_addr1 & !p_addr0) #
               [hp1_data7..0]                   & (!p_addr2 & !p_addr1 &  p_addr0) #
               [hp2_dav, ph2_sav, unused5..0]   & (!p_addr2 &  p_addr1 & !p_addr0) #
               [hp2_data7..0]                   & (!p_addr2 &  p_addr1 &  p_addr0) #
               [nmi_flag, ph3_sav, unused5..0]  & ( p_addr2 & !p_addr1 & !p_addr0) #
               [hp3_data7..0]                   & ( p_addr2 & !p_addr1 &  p_addr0) #
               [hp4_dav, ph4_sav, unused5..0]   & ( p_addr2 &  p_addr1 & !p_addr0) #
               [hp4_data7..0]                   & ( p_addr2 &  p_addr1 &  p_addr0);

[p_data0..7].oe = !p_rd_b & p_wr_b & !p_cs_b ;

// h_data output multiplexor

[h_data7..0] = [ph1_dav, hp1_sav, control5..0]  & (!h_addr2 & !h_addr1 & !h_addr0) #
               [ph1_data7..0]                   & (!h_addr2 & !h_addr1 &  h_addr0) #
               [ph2_dav, hp2_sav, unused5..0]   & (!h_addr2 &  h_addr1 & !h_addr0) #
               [ph2_data7..0]                   & (!h_addr2 &  h_addr1 &  h_addr0) #
               [ph3_dav, hp3_sav, unused5..0]   & ( h_addr2 & !h_addr1 & !h_addr0) #
               [ph3_data7..0]                   & ( h_addr2 & !h_addr1 &  h_addr0) #
               [ph4_dav, hp4_sav, unused5..0]   & ( h_addr2 &  h_addr1 & !h_addr0) #
               [ph4_data7..0]                   & ( h_addr2 &  h_addr1 &  h_addr0);

[h_data0..7].oe = h_phi2 & h_rdnw & !h_cs_b & p_powered_on;
